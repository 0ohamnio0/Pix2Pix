#pragma kernel Relu
#pragma kernel LeakyRelu
#pragma kernel Tanh
#pragma kernel BatchNorm64
#pragma kernel BatchNorm512
#pragma kernel Conv2D_64_16_1
#pragma kernel Conv2D_512_1_1
#pragma kernel Deconv2D_3_256_1
#pragma kernel Deconv2D_64_16_1
#pragma kernel Deconv2D_512_1_1

Buffer<float> Input;
Buffer<float> Filter;
Buffer<float> Bias;
RWBuffer<float> Output;

int3 InputShape;
int3 OutputShape;
int4 FilterShape;

float Alpha;

float square(float x) { return x * x; }

[numthreads(512, 1, 1)]
void Relu(uint id : SV_DispatchThreadID)
{
    Output[id] = max(0, Input[id]);
}

[numthreads(512, 1, 1)]
void LeakyRelu(uint id : SV_DispatchThreadID)
{
    float v = Input[id];
    Output[id] = max(v, v * Alpha);
}

[numthreads(512, 1, 1)]
void Tanh(uint id : SV_DispatchThreadID)
{
    Output[id] = tanh(Input[id]);
}

float GetInput(int3 i)
{
    if (any(i < 0) || any(i >= InputShape)) return 0;
    return Input[(i.x * InputShape.y + i.y) * InputShape.z + i.z];
}

float GetFilter(int4 i)
{
    if (any(i < 0) || any(i >= FilterShape)) return 0;
    return Filter[((i.x * FilterShape.y + i.y) * FilterShape.z + i.z) * FilterShape.w + i.w];
}

int OutputIndex(int3 i)
{
    return (i.x * OutputShape.y + i.y) * OutputShape.z + i.z;
}

[numthreads(64, 1, 1)] void BatchNorm64
#include "BatchNorm.hlsl"

[numthreads(512, 1, 1)] void BatchNorm512
#include "BatchNorm.hlsl"

[numthreads(64, 16, 1)] void Conv2D_64_16_1
#include "Conv2D.hlsl"

[numthreads(512, 1, 1)] void Conv2D_512_1_1
#include "Conv2D.hlsl"

[numthreads(3, 256, 1)] void Deconv2D_3_256_1
#include "Deconv2D.hlsl"

[numthreads(64, 16, 1)] void Deconv2D_64_16_1
#include "Deconv2D.hlsl"

[numthreads(512, 1, 1)] void Deconv2D_512_1_1
#include "Deconv2D.hlsl"
